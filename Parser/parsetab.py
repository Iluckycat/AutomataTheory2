
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ANY ASSIGNMENT BOOL CELLTYPE CMD CMP COMMA DIRECT DO END FLOAT FROM FUNCTION IF INT LBRACKET MINUS NAME NEWLINE OR PLUS RBRACKET SEMICOLON STEP TO WITHprogram : statementscommand : CMD DIRECTstatements : statements statement\n                        | statementstatement : empty eoe\n                      | variable eoe\n                      | assignment eoe\n                      | from eoe\n                      | if eoe\n                      | function eoe\n                      | function_call eoe\n                      | command eoeeoe : NEWLINE\n               | SEMICOLON\n               | SEMICOLON NEWLINEempty : assignment : variable ASSIGNMENT expressionvariable : NAME index\n                   | NAME LBRACKET index RBRACKETindex :\n                 | index COMMA INT\n                 | INTexpression : variable\n                        | const\n                        | operation\n                        | logic_expr\n                        | function_callconst : INT\n                 | FLOAT\n                 | BOOL\n                 | CELLTYPEoperation : expression PLUS expression\n                    | expression MINUS expression\n                    | MINUS expressionfrom : FROM expression TO expression DO FUNCTION NEWLINE statements END\n                | FROM expression TO expression function_call\n                | FROM expression TO expression WITH STEP expression DO FUNCTION NEWLINE statements END\n                | FROM expression TO expression WITH STEP expression function_callfunction_call : DO NAMEif : IF logic_expr function_call\n              | IF logic_expr DO FUNCTION NEWLINE statements ENDlogic_expr : expression AND expression\n                      | expression OR expression\n                      | expression CMP expressionfunction : FUNCTION NAME NEWLINE statements ENDassignment : variable ASSIGNMENT errorfrom : FROM expression TO expression WITH STEP expression DO FUNCTION error statements END\n                | FROM expression TO expression DO FUNCTION error statements END\n                | FROM expression error expression WITH STEP expression DO FUNCTION NEWLINE statements END\n                | FROM expression error expression DO FUNCTION NEWLINE statements END\n                | FROM expression TO  expression WITH STEP expression DO error NEWLINE statements END\n                | FROM expression TO expression DO error NEWLINE statements END\n                | FROM expression TO expression error FUNCTION NEWLINE statements END\n                | FROM expression TO expression WITH STEP expression error FUNCTION NEWLINE statements ENDif : IF logic_expr DO FUNCTION error statements END\n              | IF logic_expr DO error NEWLINE statements END\n              | IF error DO FUNCTION NEWLINE statements END\n              | IF error function_call\n              | IF logic_expr error FUNCTION NEWLINE statements ENDfunction : FUNCTION NAME error statements END\n                    | error NAME NEWLINE statements END'
    
_lr_action_items = {'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,19,20,21,22,23,25,26,27,28,29,30,31,33,34,36,37,38,39,40,41,42,43,44,46,47,51,52,53,54,57,65,66,67,68,72,73,74,75,78,79,80,81,82,83,84,85,86,87,88,89,91,96,97,98,99,100,101,102,103,104,106,108,109,110,111,112,113,114,115,116,118,120,121,122,123,124,125,126,127,128,130,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,],[-16,-16,-4,21,21,21,21,21,21,21,21,-20,-3,-5,-13,52,-6,-7,-8,-9,-10,-11,-12,-18,-22,57,-27,-23,-24,-25,-26,-28,-29,-30,-31,-39,66,-2,-15,-17,-46,-16,-34,-16,-16,-40,-58,-21,-19,-16,-32,-33,-42,-43,-44,-16,-16,98,100,101,102,-61,-36,-45,-60,-16,-16,-16,-16,-16,114,116,118,120,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-41,-55,-56,-59,-57,-16,-16,-16,-38,-16,-16,-35,-48,-52,144,146,147,-53,148,-50,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-37,-47,-51,-54,-49,]),'SEMICOLON':([0,2,3,4,5,6,7,8,9,10,11,12,19,20,21,22,23,25,26,27,28,29,30,31,33,36,37,38,39,40,41,42,43,44,46,51,52,53,54,57,65,66,67,68,72,73,74,75,78,79,80,81,82,83,84,89,91,96,97,98,99,100,101,102,109,110,111,112,113,114,115,116,118,120,121,122,123,124,125,126,127,128,130,132,134,135,136,137,141,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,],[-16,-16,-4,22,22,22,22,22,22,22,22,-20,-3,-5,-13,-14,-6,-7,-8,-9,-10,-11,-12,-18,-22,-27,-23,-24,-25,-26,-28,-29,-30,-31,-39,-2,-15,-17,-46,-16,-34,-16,-16,-40,-58,-21,-19,-16,-32,-33,-42,-43,-44,-16,-16,-61,-36,-45,-60,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-41,-55,-56,-59,-57,-16,-16,-16,-38,-16,-16,-35,-48,-52,-53,-50,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-37,-47,-51,-54,-49,]),'NAME':([0,2,3,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,45,52,57,58,59,60,61,62,63,64,66,67,69,71,75,83,84,90,98,99,100,101,102,105,107,109,110,111,112,113,114,115,116,118,120,126,127,128,129,132,134,144,145,146,147,148,149,150,151,152,153,],[12,12,-4,34,12,46,47,12,-3,-5,-13,-14,-6,12,-7,-8,-9,-10,-11,-12,12,-15,12,12,12,12,12,12,12,12,12,12,46,46,12,12,12,46,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,46,12,12,12,12,12,12,12,12,12,12,12,12,]),'FROM':([0,2,3,19,20,21,22,23,25,26,27,28,29,30,52,57,66,67,75,83,84,98,99,100,101,102,109,110,111,112,113,114,115,116,118,120,126,127,128,132,134,144,145,146,147,148,149,150,151,152,153,],[14,14,-4,-3,-5,-13,-14,-6,-7,-8,-9,-10,-11,-12,-15,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'IF':([0,2,3,19,20,21,22,23,25,26,27,28,29,30,52,57,66,67,75,83,84,98,99,100,101,102,109,110,111,112,113,114,115,116,118,120,126,127,128,132,134,144,145,146,147,148,149,150,151,152,153,],[17,17,-4,-3,-5,-13,-14,-6,-7,-8,-9,-10,-11,-12,-15,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'FUNCTION':([0,2,3,19,20,21,22,23,25,26,27,28,29,30,52,57,66,67,69,70,71,75,83,84,90,93,95,98,99,100,101,102,109,110,111,112,113,114,115,116,118,120,126,127,128,129,131,132,133,134,144,145,146,147,148,149,150,151,152,153,],[16,16,-4,-3,-5,-13,-14,-6,-7,-8,-9,-10,-11,-12,-15,16,16,16,85,87,88,16,16,16,103,106,108,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,138,140,16,142,16,16,16,16,16,16,16,16,16,16,16,]),'error':([0,2,3,12,17,19,20,21,22,23,24,25,26,27,28,29,30,31,33,35,36,37,38,39,40,41,42,43,44,46,47,48,52,57,65,66,67,69,73,74,75,76,78,79,80,81,82,83,84,85,90,98,99,100,101,102,103,109,110,111,112,113,114,115,116,117,118,120,126,127,128,129,132,134,138,144,145,146,147,148,149,150,151,152,153,],[13,13,-4,-20,49,-3,-5,-13,-14,-6,54,-7,-8,-9,-10,-11,-12,-18,-22,59,-27,-23,-24,-25,-26,-28,-29,-30,-31,-39,67,70,-15,13,-34,13,13,86,-21,-19,13,93,-32,-33,-42,-43,-44,13,13,99,104,13,13,13,13,13,115,13,13,13,13,13,13,13,13,131,13,13,13,13,13,139,13,13,145,13,13,13,13,13,13,13,13,13,13,]),'DO':([0,2,3,12,14,17,19,20,21,22,23,24,25,26,27,28,29,30,31,33,36,37,38,39,40,41,42,43,44,45,46,48,49,52,57,58,59,60,61,62,63,64,65,66,67,73,74,75,76,77,78,79,80,81,82,83,84,98,99,100,101,102,105,107,109,110,111,112,113,114,115,116,117,118,119,120,126,127,128,132,134,144,145,146,147,148,149,150,151,152,153,],[15,15,-4,-20,15,15,-3,-5,-13,-14,-6,15,-7,-8,-9,-10,-11,-12,-18,-22,-27,-23,-24,-25,-26,-28,-29,-30,-31,15,-39,69,71,-15,15,15,15,15,15,15,15,15,-34,15,15,-21,-19,15,90,95,-32,-33,-42,-43,-44,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,129,15,133,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'CMD':([0,2,3,19,20,21,22,23,25,26,27,28,29,30,52,57,66,67,75,83,84,98,99,100,101,102,109,110,111,112,113,114,115,116,118,120,126,127,128,132,134,144,145,146,147,148,149,150,151,152,153,],[18,18,-4,-3,-5,-13,-14,-6,-7,-8,-9,-10,-11,-12,-15,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'$end':([1,2,3,19,20,21,22,23,25,26,27,28,29,30,52,],[0,-1,-4,-3,-5,-13,-14,-6,-7,-8,-9,-10,-11,-12,-15,]),'END':([3,19,20,21,22,23,25,26,27,28,29,30,52,75,83,84,109,110,111,112,113,126,127,128,132,134,149,150,151,152,153,],[-4,-3,-5,-13,-14,-6,-7,-8,-9,-10,-11,-12,-15,89,96,97,121,122,123,124,125,135,136,137,141,143,154,155,156,157,158,]),'ASSIGNMENT':([5,12,31,33,73,74,],[24,-20,-18,-22,-21,-19,]),'LBRACKET':([12,],[32,]),'COMMA':([12,31,32,33,56,73,],[-20,55,-20,-22,55,-21,]),'TO':([12,31,33,35,36,37,38,39,40,41,42,43,44,46,65,73,74,78,79,80,81,82,],[-20,-18,-22,58,-27,-23,-24,-25,-26,-28,-29,-30,-31,-39,-34,-21,-19,-32,-33,-42,-43,-44,]),'PLUS':([12,31,33,35,36,37,38,39,40,41,42,43,44,46,48,50,53,65,73,74,76,77,78,79,80,81,82,117,119,],[-20,-18,-22,60,-27,-23,-24,-25,-26,-28,-29,-30,-31,-39,-26,60,60,60,-21,-19,60,60,60,60,60,60,60,60,60,]),'MINUS':([12,14,17,24,31,33,35,36,37,38,39,40,41,42,43,44,45,46,48,50,53,58,59,60,61,62,63,64,65,73,74,76,77,78,79,80,81,82,105,107,117,119,],[-20,45,45,45,-18,-22,61,-27,-23,-24,-25,-26,-28,-29,-30,-31,45,-39,-26,61,61,45,45,45,45,45,45,45,61,-21,-19,61,61,61,61,61,61,61,45,45,61,61,]),'AND':([12,31,33,35,36,37,38,39,40,41,42,43,44,46,48,50,53,65,73,74,76,77,78,79,80,81,82,117,119,],[-20,-18,-22,62,-27,-23,-24,-25,-26,-28,-29,-30,-31,-39,-26,62,62,62,-21,-19,62,62,62,62,62,62,62,62,62,]),'OR':([12,31,33,35,36,37,38,39,40,41,42,43,44,46,48,50,53,65,73,74,76,77,78,79,80,81,82,117,119,],[-20,-18,-22,63,-27,-23,-24,-25,-26,-28,-29,-30,-31,-39,-26,63,63,63,-21,-19,63,63,63,63,63,63,63,63,63,]),'CMP':([12,31,33,35,36,37,38,39,40,41,42,43,44,46,48,50,53,65,73,74,76,77,78,79,80,81,82,117,119,],[-20,-18,-22,64,-27,-23,-24,-25,-26,-28,-29,-30,-31,-39,-26,64,64,64,-21,-19,64,64,64,64,64,64,64,64,64,]),'WITH':([12,31,33,36,37,38,39,40,41,42,43,44,46,65,73,74,76,77,78,79,80,81,82,],[-20,-18,-22,-27,-23,-24,-25,-26,-28,-29,-30,-31,-39,-34,-21,-19,92,94,-32,-33,-42,-43,-44,]),'INT':([12,14,17,24,32,45,55,58,59,60,61,62,63,64,105,107,],[33,41,41,41,33,41,73,41,41,41,41,41,41,41,41,41,]),'FLOAT':([14,17,24,45,58,59,60,61,62,63,64,105,107,],[42,42,42,42,42,42,42,42,42,42,42,42,42,]),'BOOL':([14,17,24,45,58,59,60,61,62,63,64,105,107,],[43,43,43,43,43,43,43,43,43,43,43,43,43,]),'CELLTYPE':([14,17,24,45,58,59,60,61,62,63,64,105,107,],[44,44,44,44,44,44,44,44,44,44,44,44,44,]),'DIRECT':([18,],[51,]),'RBRACKET':([32,33,56,73,],[-20,-22,74,-21,]),'STEP':([92,94,],[105,107,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,57,66,67,98,99,100,101,102,114,115,116,118,120,144,145,146,147,148,],[2,75,83,84,109,110,111,112,113,126,127,128,132,134,149,150,151,152,153,]),'statement':([0,2,57,66,67,75,83,84,98,99,100,101,102,109,110,111,112,113,114,115,116,118,120,126,127,128,132,134,144,145,146,147,148,149,150,151,152,153,],[3,19,3,3,3,19,19,19,3,3,3,3,3,19,19,19,19,19,3,3,3,3,3,19,19,19,19,19,3,3,3,3,3,19,19,19,19,19,]),'empty':([0,2,57,66,67,75,83,84,98,99,100,101,102,109,110,111,112,113,114,115,116,118,120,126,127,128,132,134,144,145,146,147,148,149,150,151,152,153,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'variable':([0,2,14,17,24,45,57,58,59,60,61,62,63,64,66,67,75,83,84,98,99,100,101,102,105,107,109,110,111,112,113,114,115,116,118,120,126,127,128,132,134,144,145,146,147,148,149,150,151,152,153,],[5,5,37,37,37,37,5,37,37,37,37,37,37,37,5,5,5,5,5,5,5,5,5,5,37,37,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'assignment':([0,2,57,66,67,75,83,84,98,99,100,101,102,109,110,111,112,113,114,115,116,118,120,126,127,128,132,134,144,145,146,147,148,149,150,151,152,153,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'from':([0,2,57,66,67,75,83,84,98,99,100,101,102,109,110,111,112,113,114,115,116,118,120,126,127,128,132,134,144,145,146,147,148,149,150,151,152,153,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'if':([0,2,57,66,67,75,83,84,98,99,100,101,102,109,110,111,112,113,114,115,116,118,120,126,127,128,132,134,144,145,146,147,148,149,150,151,152,153,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'function':([0,2,57,66,67,75,83,84,98,99,100,101,102,109,110,111,112,113,114,115,116,118,120,126,127,128,132,134,144,145,146,147,148,149,150,151,152,153,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'function_call':([0,2,14,17,24,45,48,49,57,58,59,60,61,62,63,64,66,67,75,76,83,84,98,99,100,101,102,105,107,109,110,111,112,113,114,115,116,117,118,120,126,127,128,132,134,144,145,146,147,148,149,150,151,152,153,],[10,10,36,36,36,36,68,72,10,36,36,36,36,36,36,36,10,10,10,91,10,10,10,10,10,10,10,36,36,10,10,10,10,10,10,10,10,130,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'command':([0,2,57,66,67,75,83,84,98,99,100,101,102,109,110,111,112,113,114,115,116,118,120,126,127,128,132,134,144,145,146,147,148,149,150,151,152,153,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'eoe':([4,5,6,7,8,9,10,11,],[20,23,25,26,27,28,29,30,]),'index':([12,32,],[31,56,]),'expression':([14,17,24,45,58,59,60,61,62,63,64,105,107,],[35,50,53,65,76,77,78,79,80,81,82,117,119,]),'const':([14,17,24,45,58,59,60,61,62,63,64,105,107,],[38,38,38,38,38,38,38,38,38,38,38,38,38,]),'operation':([14,17,24,45,58,59,60,61,62,63,64,105,107,],[39,39,39,39,39,39,39,39,39,39,39,39,39,]),'logic_expr':([14,17,24,45,58,59,60,61,62,63,64,105,107,],[40,48,40,40,40,40,40,40,40,40,40,40,40,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser_my.py',31),
  ('command -> CMD DIRECT','command',2,'p_command','parser_my.py',35),
  ('statements -> statements statement','statements',2,'p_statements','parser_my.py',40),
  ('statements -> statement','statements',1,'p_statements','parser_my.py',41),
  ('statement -> empty eoe','statement',2,'p_statement','parser_my.py',48),
  ('statement -> variable eoe','statement',2,'p_statement','parser_my.py',49),
  ('statement -> assignment eoe','statement',2,'p_statement','parser_my.py',50),
  ('statement -> from eoe','statement',2,'p_statement','parser_my.py',51),
  ('statement -> if eoe','statement',2,'p_statement','parser_my.py',52),
  ('statement -> function eoe','statement',2,'p_statement','parser_my.py',53),
  ('statement -> function_call eoe','statement',2,'p_statement','parser_my.py',54),
  ('statement -> command eoe','statement',2,'p_statement','parser_my.py',55),
  ('eoe -> NEWLINE','eoe',1,'p_eoe','parser_my.py',59),
  ('eoe -> SEMICOLON','eoe',1,'p_eoe','parser_my.py',60),
  ('eoe -> SEMICOLON NEWLINE','eoe',2,'p_eoe','parser_my.py',61),
  ('empty -> <empty>','empty',0,'p_empty','parser_my.py',65),
  ('assignment -> variable ASSIGNMENT expression','assignment',3,'p_assigment','parser_my.py',69),
  ('variable -> NAME index','variable',2,'p_variable','parser_my.py',73),
  ('variable -> NAME LBRACKET index RBRACKET','variable',4,'p_variable','parser_my.py',74),
  ('index -> <empty>','index',0,'p_index','parser_my.py',83),
  ('index -> index COMMA INT','index',3,'p_index','parser_my.py',84),
  ('index -> INT','index',1,'p_index','parser_my.py',85),
  ('expression -> variable','expression',1,'p_expression','parser_my.py',95),
  ('expression -> const','expression',1,'p_expression','parser_my.py',96),
  ('expression -> operation','expression',1,'p_expression','parser_my.py',97),
  ('expression -> logic_expr','expression',1,'p_expression','parser_my.py',98),
  ('expression -> function_call','expression',1,'p_expression','parser_my.py',99),
  ('const -> INT','const',1,'p_const','parser_my.py',103),
  ('const -> FLOAT','const',1,'p_const','parser_my.py',104),
  ('const -> BOOL','const',1,'p_const','parser_my.py',105),
  ('const -> CELLTYPE','const',1,'p_const','parser_my.py',106),
  ('operation -> expression PLUS expression','operation',3,'p_operations','parser_my.py',110),
  ('operation -> expression MINUS expression','operation',3,'p_operations','parser_my.py',111),
  ('operation -> MINUS expression','operation',2,'p_operations','parser_my.py',112),
  ('from -> FROM expression TO expression DO FUNCTION NEWLINE statements END','from',9,'p_from','parser_my.py',119),
  ('from -> FROM expression TO expression function_call','from',5,'p_from','parser_my.py',120),
  ('from -> FROM expression TO expression WITH STEP expression DO FUNCTION NEWLINE statements END','from',12,'p_from','parser_my.py',121),
  ('from -> FROM expression TO expression WITH STEP expression function_call','from',8,'p_from','parser_my.py',122),
  ('function_call -> DO NAME','function_call',2,'p_function_call','parser_my.py',137),
  ('if -> IF logic_expr function_call','if',3,'p_if','parser_my.py',142),
  ('if -> IF logic_expr DO FUNCTION NEWLINE statements END','if',7,'p_if','parser_my.py',143),
  ('logic_expr -> expression AND expression','logic_expr',3,'p_logic_expr','parser_my.py',150),
  ('logic_expr -> expression OR expression','logic_expr',3,'p_logic_expr','parser_my.py',151),
  ('logic_expr -> expression CMP expression','logic_expr',3,'p_logic_expr','parser_my.py',152),
  ('function -> FUNCTION NAME NEWLINE statements END','function',5,'p_function','parser_my.py',156),
  ('assignment -> variable ASSIGNMENT error','assignment',3,'p_assignment_error','parser_my.py',163),
  ('from -> FROM expression TO expression WITH STEP expression DO FUNCTION error statements END','from',12,'p_from_error','parser_my.py',169),
  ('from -> FROM expression TO expression DO FUNCTION error statements END','from',9,'p_from_error','parser_my.py',170),
  ('from -> FROM expression error expression WITH STEP expression DO FUNCTION NEWLINE statements END','from',12,'p_from_error','parser_my.py',171),
  ('from -> FROM expression error expression DO FUNCTION NEWLINE statements END','from',9,'p_from_error','parser_my.py',172),
  ('from -> FROM expression TO expression WITH STEP expression DO error NEWLINE statements END','from',12,'p_from_error','parser_my.py',173),
  ('from -> FROM expression TO expression DO error NEWLINE statements END','from',9,'p_from_error','parser_my.py',174),
  ('from -> FROM expression TO expression error FUNCTION NEWLINE statements END','from',9,'p_from_error','parser_my.py',175),
  ('from -> FROM expression TO expression WITH STEP expression error FUNCTION NEWLINE statements END','from',12,'p_from_error','parser_my.py',176),
  ('if -> IF logic_expr DO FUNCTION error statements END','if',7,'p_if_error','parser_my.py',184),
  ('if -> IF logic_expr DO error NEWLINE statements END','if',7,'p_if_error','parser_my.py',185),
  ('if -> IF error DO FUNCTION NEWLINE statements END','if',7,'p_if_error','parser_my.py',186),
  ('if -> IF error function_call','if',3,'p_if_error','parser_my.py',187),
  ('if -> IF logic_expr error FUNCTION NEWLINE statements END','if',7,'p_if_error','parser_my.py',188),
  ('function -> FUNCTION NAME error statements END','function',5,'p_function_error','parser_my.py',196),
  ('function -> error NAME NEWLINE statements END','function',5,'p_function_error','parser_my.py',197),
]
