
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ANY ASSIGNMENT BOOL CELLTYPE CMD CMP COMMA DIRECT DO END FLOAT FROM FUNCTION IF INT LBRACKET MINUS NAME NEWLINE OR PLUS RBRACKET SEMICOLON STEP TO WITHprogram : statementscommand : CMD DIRECTstatements : statements statement\n                        | statementstatement : empty eoe\n                      | variable eoe\n                      | assignment eoe\n                      | from eoe\n                      | if eoe\n                      | function eoe\n                      | function_call eoe\n                      | command eoeeoe : NEWLINE\n               | SEMICOLON\n               | SEMICOLON NEWLINEempty : assignment : variable ASSIGNMENT expressionvariable : NAME LBRACKET index RBRACKETvar : NAMEindex :\n                 | index COMMA INT\n                 | INTexpression : variable\n                        | var\n                        | const\n                        | operation\n                        | logic_expr\n                        | function_callconst : INT\n                 | FLOAT\n                 | BOOL\n                 | CELLTYPEoperation : expression PLUS expression\n                    | expression MINUS expression\n                    | MINUS expressionfrom : FROM expression TO expression DO FUNCTION NEWLINE statements END\n                | FROM expression TO expression function_call\n                | FROM expression TO expression WITH STEP expression DO FUNCTION NEWLINE statements END\n                | FROM expression TO expression WITH STEP expression function_callfunction_call : DO NAMEif : IF logic_expr function_call\n              | IF logic_expr DO FUNCTION NEWLINE statements ENDlogic_expr : expression AND expression\n                      | expression OR expression\n                      | expression CMP expressionfunction : FUNCTION NAME NEWLINE statements ENDassignment : variable ASSIGNMENT errorfrom : FROM expression TO expression WITH STEP expression DO FUNCTION error statements END\n                | FROM expression TO expression DO FUNCTION error statements END\n                | FROM expression error expression WITH STEP expression DO FUNCTION NEWLINE statements END\n                | FROM expression error expression DO FUNCTION NEWLINE statements END\n                | FROM expression TO  expression WITH STEP expression DO error NEWLINE statements END\n                | FROM expression TO expression DO error NEWLINE statements END\n                | FROM expression TO expression error FUNCTION NEWLINE statements END\n                | FROM expression TO expression WITH STEP expression error FUNCTION NEWLINE statements ENDif : IF logic_expr DO FUNCTION error statements END\n              | IF logic_expr DO error NEWLINE statements END\n              | IF error DO FUNCTION NEWLINE statements END\n              | IF error function_call\n              | IF logic_expr error FUNCTION NEWLINE statements ENDfunction : FUNCTION NAME error statements END\n                    | error NAME NEWLINE statements END'
    
_lr_action_items = {'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,19,20,21,22,23,25,26,27,28,29,30,32,34,35,36,37,38,39,40,41,42,43,44,46,47,51,52,53,54,57,65,66,67,68,72,73,75,78,79,80,81,82,83,84,85,86,87,88,90,92,97,98,99,100,101,102,103,104,105,107,109,110,111,112,113,114,115,116,117,119,121,122,123,124,125,126,127,128,129,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,],[-16,-16,-4,21,21,21,21,21,21,21,21,-3,-5,-13,52,-6,-7,-8,-9,-10,-11,-12,57,-28,-23,-24,-25,-26,-27,-19,-29,-30,-31,-32,-40,66,-2,-15,-17,-47,-16,-35,-16,-16,-41,-59,-18,-16,-33,-34,-43,-44,-45,-16,-16,99,101,102,103,-62,-37,-46,-61,-16,-16,-16,-16,-16,115,117,119,121,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-42,-56,-57,-60,-58,-16,-16,-16,-39,-16,-16,-36,-49,-53,145,147,148,-54,149,-51,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-38,-48,-52,-55,-50,]),'SEMICOLON':([0,2,3,4,5,6,7,8,9,10,11,19,20,21,22,23,25,26,27,28,29,30,34,35,36,37,38,39,40,41,42,43,44,46,51,52,53,54,57,65,66,67,68,72,73,75,78,79,80,81,82,83,84,90,92,97,98,99,100,101,102,103,110,111,112,113,114,115,116,117,119,121,122,123,124,125,126,127,128,129,131,133,135,136,137,138,142,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,],[-16,-16,-4,22,22,22,22,22,22,22,22,-3,-5,-13,-14,-6,-7,-8,-9,-10,-11,-12,-28,-23,-24,-25,-26,-27,-19,-29,-30,-31,-32,-40,-2,-15,-17,-47,-16,-35,-16,-16,-41,-59,-18,-16,-33,-34,-43,-44,-45,-16,-16,-62,-37,-46,-61,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-42,-56,-57,-60,-58,-16,-16,-16,-39,-16,-16,-36,-49,-53,-54,-51,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-38,-48,-52,-55,-50,]),'NAME':([0,2,3,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,45,52,57,58,59,60,61,62,63,64,66,67,69,71,75,83,84,91,99,100,101,102,103,106,108,110,111,112,113,114,115,116,117,119,121,127,128,129,130,133,135,145,146,147,148,149,150,151,152,153,154,],[12,12,-4,32,40,46,47,40,-3,-5,-13,-14,-6,40,-7,-8,-9,-10,-11,-12,40,-15,12,40,40,40,40,40,40,40,12,12,46,46,12,12,12,46,12,12,12,12,12,40,40,12,12,12,12,12,12,12,12,12,12,12,12,12,46,12,12,12,12,12,12,12,12,12,12,12,12,]),'FROM':([0,2,3,19,20,21,22,23,25,26,27,28,29,30,52,57,66,67,75,83,84,99,100,101,102,103,110,111,112,113,114,115,116,117,119,121,127,128,129,133,135,145,146,147,148,149,150,151,152,153,154,],[14,14,-4,-3,-5,-13,-14,-6,-7,-8,-9,-10,-11,-12,-15,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'IF':([0,2,3,19,20,21,22,23,25,26,27,28,29,30,52,57,66,67,75,83,84,99,100,101,102,103,110,111,112,113,114,115,116,117,119,121,127,128,129,133,135,145,146,147,148,149,150,151,152,153,154,],[17,17,-4,-3,-5,-13,-14,-6,-7,-8,-9,-10,-11,-12,-15,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'FUNCTION':([0,2,3,19,20,21,22,23,25,26,27,28,29,30,52,57,66,67,69,70,71,75,83,84,91,94,96,99,100,101,102,103,110,111,112,113,114,115,116,117,119,121,127,128,129,130,132,133,134,135,145,146,147,148,149,150,151,152,153,154,],[16,16,-4,-3,-5,-13,-14,-6,-7,-8,-9,-10,-11,-12,-15,16,16,16,85,87,88,16,16,16,104,107,109,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,139,141,16,143,16,16,16,16,16,16,16,16,16,16,16,]),'error':([0,2,3,17,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,52,57,65,66,67,69,73,75,76,78,79,80,81,82,83,84,85,91,99,100,101,102,103,104,110,111,112,113,114,115,116,117,118,119,121,127,128,129,130,133,135,139,145,146,147,148,149,150,151,152,153,154,],[13,13,-4,49,-3,-5,-13,-14,-6,54,-7,-8,-9,-10,-11,-12,59,-28,-23,-24,-25,-26,-27,-19,-29,-30,-31,-32,-40,67,70,-15,13,-35,13,13,86,-18,13,94,-33,-34,-43,-44,-45,13,13,100,105,13,13,13,13,13,116,13,13,13,13,13,13,13,13,132,13,13,13,13,13,140,13,13,146,13,13,13,13,13,13,13,13,13,13,]),'DO':([0,2,3,14,17,19,20,21,22,23,24,25,26,27,28,29,30,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,52,57,58,59,60,61,62,63,64,65,66,67,73,75,76,77,78,79,80,81,82,83,84,99,100,101,102,103,106,108,110,111,112,113,114,115,116,117,118,119,120,121,127,128,129,133,135,145,146,147,148,149,150,151,152,153,154,],[15,15,-4,15,15,-3,-5,-13,-14,-6,15,-7,-8,-9,-10,-11,-12,-28,-23,-24,-25,-26,-27,-19,-29,-30,-31,-32,15,-40,69,71,-15,15,15,15,15,15,15,15,15,-35,15,15,-18,15,91,96,-33,-34,-43,-44,-45,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,130,15,134,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'CMD':([0,2,3,19,20,21,22,23,25,26,27,28,29,30,52,57,66,67,75,83,84,99,100,101,102,103,110,111,112,113,114,115,116,117,119,121,127,128,129,133,135,145,146,147,148,149,150,151,152,153,154,],[18,18,-4,-3,-5,-13,-14,-6,-7,-8,-9,-10,-11,-12,-15,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'$end':([1,2,3,19,20,21,22,23,25,26,27,28,29,30,52,],[0,-1,-4,-3,-5,-13,-14,-6,-7,-8,-9,-10,-11,-12,-15,]),'END':([3,19,20,21,22,23,25,26,27,28,29,30,52,75,83,84,110,111,112,113,114,127,128,129,133,135,150,151,152,153,154,],[-4,-3,-5,-13,-14,-6,-7,-8,-9,-10,-11,-12,-15,90,97,98,122,123,124,125,126,136,137,138,142,144,155,156,157,158,159,]),'ASSIGNMENT':([5,73,],[24,-18,]),'LBRACKET':([12,40,],[31,31,]),'INT':([14,17,24,31,45,58,59,60,61,62,63,64,74,106,108,],[41,41,41,56,41,41,41,41,41,41,41,41,89,41,41,]),'FLOAT':([14,17,24,45,58,59,60,61,62,63,64,106,108,],[42,42,42,42,42,42,42,42,42,42,42,42,42,]),'BOOL':([14,17,24,45,58,59,60,61,62,63,64,106,108,],[43,43,43,43,43,43,43,43,43,43,43,43,43,]),'CELLTYPE':([14,17,24,45,58,59,60,61,62,63,64,106,108,],[44,44,44,44,44,44,44,44,44,44,44,44,44,]),'MINUS':([14,17,24,33,34,35,36,37,38,39,40,41,42,43,44,45,46,48,50,53,58,59,60,61,62,63,64,65,73,76,77,78,79,80,81,82,106,108,118,120,],[45,45,45,61,-28,-23,-24,-25,-26,-27,-19,-29,-30,-31,-32,45,-40,-27,61,61,45,45,45,45,45,45,45,61,-18,61,61,61,61,61,61,61,45,45,61,61,]),'DIRECT':([18,],[51,]),'RBRACKET':([31,55,56,89,],[-20,73,-22,-21,]),'COMMA':([31,55,56,89,],[-20,74,-22,-21,]),'TO':([33,34,35,36,37,38,39,40,41,42,43,44,46,65,73,78,79,80,81,82,],[58,-28,-23,-24,-25,-26,-27,-19,-29,-30,-31,-32,-40,-35,-18,-33,-34,-43,-44,-45,]),'PLUS':([33,34,35,36,37,38,39,40,41,42,43,44,46,48,50,53,65,73,76,77,78,79,80,81,82,118,120,],[60,-28,-23,-24,-25,-26,-27,-19,-29,-30,-31,-32,-40,-27,60,60,60,-18,60,60,60,60,60,60,60,60,60,]),'AND':([33,34,35,36,37,38,39,40,41,42,43,44,46,48,50,53,65,73,76,77,78,79,80,81,82,118,120,],[62,-28,-23,-24,-25,-26,-27,-19,-29,-30,-31,-32,-40,-27,62,62,62,-18,62,62,62,62,62,62,62,62,62,]),'OR':([33,34,35,36,37,38,39,40,41,42,43,44,46,48,50,53,65,73,76,77,78,79,80,81,82,118,120,],[63,-28,-23,-24,-25,-26,-27,-19,-29,-30,-31,-32,-40,-27,63,63,63,-18,63,63,63,63,63,63,63,63,63,]),'CMP':([33,34,35,36,37,38,39,40,41,42,43,44,46,48,50,53,65,73,76,77,78,79,80,81,82,118,120,],[64,-28,-23,-24,-25,-26,-27,-19,-29,-30,-31,-32,-40,-27,64,64,64,-18,64,64,64,64,64,64,64,64,64,]),'WITH':([34,35,36,37,38,39,40,41,42,43,44,46,65,73,76,77,78,79,80,81,82,],[-28,-23,-24,-25,-26,-27,-19,-29,-30,-31,-32,-40,-35,-18,93,95,-33,-34,-43,-44,-45,]),'STEP':([93,95,],[106,108,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,57,66,67,99,100,101,102,103,115,116,117,119,121,145,146,147,148,149,],[2,75,83,84,110,111,112,113,114,127,128,129,133,135,150,151,152,153,154,]),'statement':([0,2,57,66,67,75,83,84,99,100,101,102,103,110,111,112,113,114,115,116,117,119,121,127,128,129,133,135,145,146,147,148,149,150,151,152,153,154,],[3,19,3,3,3,19,19,19,3,3,3,3,3,19,19,19,19,19,3,3,3,3,3,19,19,19,19,19,3,3,3,3,3,19,19,19,19,19,]),'empty':([0,2,57,66,67,75,83,84,99,100,101,102,103,110,111,112,113,114,115,116,117,119,121,127,128,129,133,135,145,146,147,148,149,150,151,152,153,154,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'variable':([0,2,14,17,24,45,57,58,59,60,61,62,63,64,66,67,75,83,84,99,100,101,102,103,106,108,110,111,112,113,114,115,116,117,119,121,127,128,129,133,135,145,146,147,148,149,150,151,152,153,154,],[5,5,35,35,35,35,5,35,35,35,35,35,35,35,5,5,5,5,5,5,5,5,5,5,35,35,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'assignment':([0,2,57,66,67,75,83,84,99,100,101,102,103,110,111,112,113,114,115,116,117,119,121,127,128,129,133,135,145,146,147,148,149,150,151,152,153,154,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'from':([0,2,57,66,67,75,83,84,99,100,101,102,103,110,111,112,113,114,115,116,117,119,121,127,128,129,133,135,145,146,147,148,149,150,151,152,153,154,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'if':([0,2,57,66,67,75,83,84,99,100,101,102,103,110,111,112,113,114,115,116,117,119,121,127,128,129,133,135,145,146,147,148,149,150,151,152,153,154,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'function':([0,2,57,66,67,75,83,84,99,100,101,102,103,110,111,112,113,114,115,116,117,119,121,127,128,129,133,135,145,146,147,148,149,150,151,152,153,154,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'function_call':([0,2,14,17,24,45,48,49,57,58,59,60,61,62,63,64,66,67,75,76,83,84,99,100,101,102,103,106,108,110,111,112,113,114,115,116,117,118,119,121,127,128,129,133,135,145,146,147,148,149,150,151,152,153,154,],[10,10,34,34,34,34,68,72,10,34,34,34,34,34,34,34,10,10,10,92,10,10,10,10,10,10,10,34,34,10,10,10,10,10,10,10,10,131,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'command':([0,2,57,66,67,75,83,84,99,100,101,102,103,110,111,112,113,114,115,116,117,119,121,127,128,129,133,135,145,146,147,148,149,150,151,152,153,154,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'eoe':([4,5,6,7,8,9,10,11,],[20,23,25,26,27,28,29,30,]),'expression':([14,17,24,45,58,59,60,61,62,63,64,106,108,],[33,50,53,65,76,77,78,79,80,81,82,118,120,]),'var':([14,17,24,45,58,59,60,61,62,63,64,106,108,],[36,36,36,36,36,36,36,36,36,36,36,36,36,]),'const':([14,17,24,45,58,59,60,61,62,63,64,106,108,],[37,37,37,37,37,37,37,37,37,37,37,37,37,]),'operation':([14,17,24,45,58,59,60,61,62,63,64,106,108,],[38,38,38,38,38,38,38,38,38,38,38,38,38,]),'logic_expr':([14,17,24,45,58,59,60,61,62,63,64,106,108,],[39,48,39,39,39,39,39,39,39,39,39,39,39,]),'index':([31,],[55,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser_my.py',31),
  ('command -> CMD DIRECT','command',2,'p_command','parser_my.py',35),
  ('statements -> statements statement','statements',2,'p_statements','parser_my.py',40),
  ('statements -> statement','statements',1,'p_statements','parser_my.py',41),
  ('statement -> empty eoe','statement',2,'p_statement','parser_my.py',48),
  ('statement -> variable eoe','statement',2,'p_statement','parser_my.py',49),
  ('statement -> assignment eoe','statement',2,'p_statement','parser_my.py',50),
  ('statement -> from eoe','statement',2,'p_statement','parser_my.py',51),
  ('statement -> if eoe','statement',2,'p_statement','parser_my.py',52),
  ('statement -> function eoe','statement',2,'p_statement','parser_my.py',53),
  ('statement -> function_call eoe','statement',2,'p_statement','parser_my.py',54),
  ('statement -> command eoe','statement',2,'p_statement','parser_my.py',55),
  ('eoe -> NEWLINE','eoe',1,'p_eoe','parser_my.py',59),
  ('eoe -> SEMICOLON','eoe',1,'p_eoe','parser_my.py',60),
  ('eoe -> SEMICOLON NEWLINE','eoe',2,'p_eoe','parser_my.py',61),
  ('empty -> <empty>','empty',0,'p_empty','parser_my.py',65),
  ('assignment -> variable ASSIGNMENT expression','assignment',3,'p_assigment','parser_my.py',69),
  ('variable -> NAME LBRACKET index RBRACKET','variable',4,'p_variable','parser_my.py',73),
  ('var -> NAME','var',1,'p_var','parser_my.py',81),
  ('index -> <empty>','index',0,'p_index','parser_my.py',85),
  ('index -> index COMMA INT','index',3,'p_index','parser_my.py',86),
  ('index -> INT','index',1,'p_index','parser_my.py',87),
  ('expression -> variable','expression',1,'p_expression','parser_my.py',97),
  ('expression -> var','expression',1,'p_expression','parser_my.py',98),
  ('expression -> const','expression',1,'p_expression','parser_my.py',99),
  ('expression -> operation','expression',1,'p_expression','parser_my.py',100),
  ('expression -> logic_expr','expression',1,'p_expression','parser_my.py',101),
  ('expression -> function_call','expression',1,'p_expression','parser_my.py',102),
  ('const -> INT','const',1,'p_const','parser_my.py',106),
  ('const -> FLOAT','const',1,'p_const','parser_my.py',107),
  ('const -> BOOL','const',1,'p_const','parser_my.py',108),
  ('const -> CELLTYPE','const',1,'p_const','parser_my.py',109),
  ('operation -> expression PLUS expression','operation',3,'p_operations','parser_my.py',113),
  ('operation -> expression MINUS expression','operation',3,'p_operations','parser_my.py',114),
  ('operation -> MINUS expression','operation',2,'p_operations','parser_my.py',115),
  ('from -> FROM expression TO expression DO FUNCTION NEWLINE statements END','from',9,'p_from','parser_my.py',122),
  ('from -> FROM expression TO expression function_call','from',5,'p_from','parser_my.py',123),
  ('from -> FROM expression TO expression WITH STEP expression DO FUNCTION NEWLINE statements END','from',12,'p_from','parser_my.py',124),
  ('from -> FROM expression TO expression WITH STEP expression function_call','from',8,'p_from','parser_my.py',125),
  ('function_call -> DO NAME','function_call',2,'p_function_call','parser_my.py',140),
  ('if -> IF logic_expr function_call','if',3,'p_if','parser_my.py',145),
  ('if -> IF logic_expr DO FUNCTION NEWLINE statements END','if',7,'p_if','parser_my.py',146),
  ('logic_expr -> expression AND expression','logic_expr',3,'p_logic_expr','parser_my.py',153),
  ('logic_expr -> expression OR expression','logic_expr',3,'p_logic_expr','parser_my.py',154),
  ('logic_expr -> expression CMP expression','logic_expr',3,'p_logic_expr','parser_my.py',155),
  ('function -> FUNCTION NAME NEWLINE statements END','function',5,'p_function','parser_my.py',159),
  ('assignment -> variable ASSIGNMENT error','assignment',3,'p_assignment_error','parser_my.py',166),
  ('from -> FROM expression TO expression WITH STEP expression DO FUNCTION error statements END','from',12,'p_from_error','parser_my.py',172),
  ('from -> FROM expression TO expression DO FUNCTION error statements END','from',9,'p_from_error','parser_my.py',173),
  ('from -> FROM expression error expression WITH STEP expression DO FUNCTION NEWLINE statements END','from',12,'p_from_error','parser_my.py',174),
  ('from -> FROM expression error expression DO FUNCTION NEWLINE statements END','from',9,'p_from_error','parser_my.py',175),
  ('from -> FROM expression TO expression WITH STEP expression DO error NEWLINE statements END','from',12,'p_from_error','parser_my.py',176),
  ('from -> FROM expression TO expression DO error NEWLINE statements END','from',9,'p_from_error','parser_my.py',177),
  ('from -> FROM expression TO expression error FUNCTION NEWLINE statements END','from',9,'p_from_error','parser_my.py',178),
  ('from -> FROM expression TO expression WITH STEP expression error FUNCTION NEWLINE statements END','from',12,'p_from_error','parser_my.py',179),
  ('if -> IF logic_expr DO FUNCTION error statements END','if',7,'p_if_error','parser_my.py',187),
  ('if -> IF logic_expr DO error NEWLINE statements END','if',7,'p_if_error','parser_my.py',188),
  ('if -> IF error DO FUNCTION NEWLINE statements END','if',7,'p_if_error','parser_my.py',189),
  ('if -> IF error function_call','if',3,'p_if_error','parser_my.py',190),
  ('if -> IF logic_expr error FUNCTION NEWLINE statements END','if',7,'p_if_error','parser_my.py',191),
  ('function -> FUNCTION NAME error statements END','function',5,'p_function_error','parser_my.py',199),
  ('function -> error NAME NEWLINE statements END','function',5,'p_function_error','parser_my.py',200),
]
